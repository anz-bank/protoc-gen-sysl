
Foo[~gRPC]:
    @description = ""
    @package = "grpc_testing"
    @source_path = "tests/test/test.proto"
    Foobar(input <: grpc_testing.StreamingOutputCallRequest)[~gRPC]:
        @description = ""
        @source_path = "tests/test/test.proto"
        return ok <: grpc_testing.StreamingOutputCallResponse

TestService[~gRPC]:
    @description =:
        | A simple service to test the various types of RPCs and experiment with
        | performance with various types of payload.
        | One empty request followed by one empty response.
        |    rpc EmptyCall(Empty) returns (Empty);
    @package = "grpc_testing"
    @source_path = "tests/test/test.proto"
    FullDuplexCall(input <: grpc_testing.StreamingOutputCallRequest)[~gRPC]:
        @description =:
            | A sequence of requests with each request served by the server immediately.
            | As one request could lead to multiple responses, this interface
            | demonstrates the idea of full duplexing.
        @source_path = "tests/test/test.proto"
        return ok <: grpc_testing.StreamingOutputCallResponse
    HalfDuplexCall(input <: grpc_testing.StreamingOutputCallRequest)[~gRPC]:
        @description =:
            | A sequence of requests followed by a sequence of responses.
            | The server buffers all the client requests and then serves them in order. A
            | stream of responses are returned to the client when the server starts with
            | first request.
        @source_path = "tests/test/test.proto"
        return ok <: grpc_testing.StreamingOutputCallResponse
    StreamingInputCall(input <: grpc_testing.StreamingInputCallRequest)[~gRPC]:
        @description =:
            | A sequence of requests followed by one response (streamed upload).
            | The server returns the aggregated size of client payload as the result.
        @source_path = "tests/test/test.proto"
        return ok <: grpc_testing.StreamingInputCallResponse
    StreamingOutputCall(input <: grpc_testing.StreamingOutputCallRequest)[~gRPC]:
        @description =:
            | One request followed by a sequence of responses (streamed download).
            | The server returns the payload with client desired type and sizes.
        @source_path = "tests/test/test.proto"
        return ok <: grpc_testing.StreamingOutputCallResponse

grpc_testing:
    @package = "grpc_testing"
    !type EchoStatus:
        @description =:
            | A protobuf representation for grpc status. This is used by test
            | clients to specify a status that the server should attempt to return.
        @source_path = "tests/test/test.proto"
        code <: int:
            @json_tag = "code"
            @rpcId = "1"
        message <: string:
            @json_tag = "message"
            @rpcId = "2"
    !enum GrpclbRouteType:
        GRPCLB_ROUTE_TYPE_BACKEND: 2
        GRPCLB_ROUTE_TYPE_FALLBACK: 1
        GRPCLB_ROUTE_TYPE_UNKNOWN: 0
    !type Payload:
        @description =:
            | A block of data, to simply increase gRPC message size.
        @source_path = "tests/test/test.proto"
        body <: bytes:
            @description =:
                | Primary contents of payload.
            @json_tag = "body"
            @rpcId = "2"
        type <: PayloadType:
            @description =:
                | The type of data in body.
            @json_tag = "type"
            @rpcId = "1"
    !enum PayloadType:
        COMPRESSABLE: 0
        RANDOM: 2
        UNCOMPRESSABLE: 1
    !type ResponseParameters:
        @description =:
            | Configuration for a particular response.
        @source_path = "tests/test/test.proto"
        interval_us <: int:
            @description =:
                | Desired interval between consecutive responses in the response stream in
                | microseconds.
            @json_tag = "intervalUs"
            @rpcId = "2"
        size <: int:
            @description =:
                | Desired payload sizes in responses from the server.
                | If response_type is COMPRESSABLE, this denotes the size before compression.
            @json_tag = "size"
            @rpcId = "1"
    !type SimpleRequest:
        @description =:
            | Unary request.
        @source_path = "tests/test/test.proto"
        fill_grpclb_route_type <: bool:
            @description =:
                | Whether SimpleResponse should include grpclb_route_type.
            @json_tag = "fillGrpclbRouteType"
            @rpcId = "10"
        fill_oauth_scope <: bool:
            @description =:
                | Whether SimpleResponse should include OAuth scope.
            @json_tag = "fillOauthScope"
            @rpcId = "5"
        fill_server_id <: bool:
            @description =:
                | Whether SimpleResponse should include server_id.
            @json_tag = "fillServerId"
            @rpcId = "9"
        fill_username <: bool:
            @description =:
                | Whether SimpleResponse should include username.
            @json_tag = "fillUsername"
            @rpcId = "4"
        payload <: Payload:
            @description =:
                | Optional input payload sent along with the request.
            @json_tag = "payload"
            @rpcId = "3"
        response_size <: int:
            @description =:
                | Desired payload size in the response from the server.
                | If response_type is COMPRESSABLE, this denotes the size before compression.
            @json_tag = "responseSize"
            @rpcId = "2"
        response_status <: EchoStatus:
            @description =:
                | Whether server should return a given status
            @json_tag = "responseStatus"
            @rpcId = "7"
        response_type <: PayloadType:
            @description =:
                | Desired payload type in the response from the server.
                | If response_type is RANDOM, server randomly chooses one from other formats.
            @json_tag = "responseType"
            @rpcId = "1"
    !type SimpleResponse:
        @description =:
            | Unary response, as configured by the request.
        @source_path = "tests/test/test.proto"
        grpclb_route_type <: GrpclbRouteType:
            @description =:
                | gRPCLB Path.
            @json_tag = "grpclbRouteType"
            @rpcId = "5"
        oauth_scope <: string:
            @description =:
                | OAuth scope.
            @json_tag = "oauthScope"
            @rpcId = "3"
        payload <: Payload:
            @description =:
                | Payload to increase message size.
            @json_tag = "payload"
            @rpcId = "1"
        server_id <: string:
            @description =:
                | Server ID. This must be unique among different server instances,
                | but the same across all RPC's made to a particular server instance.
            @json_tag = "serverId"
            @rpcId = "4"
        username <: string:
            @description =:
                | The user the request came from, for verifying authentication was
                | successful when the client expected it.
            @json_tag = "username"
            @rpcId = "2"
    !type StreamingInputCallRequest:
        @description =:
            | Client-streaming request.
        @source_path = "tests/test/test.proto"
        payload <: Payload:
            @description =:
                | Optional input payload sent along with the request.
            @json_tag = "payload"
            @rpcId = "1"
    !type StreamingInputCallResponse:
        @description =:
            | Client-streaming response.
        @source_path = "tests/test/test.proto"
        aggregated_payload_size <: int:
            @description =:
                | Aggregated size of payloads received from the client.
            @json_tag = "aggregatedPayloadSize"
            @rpcId = "1"
    !type StreamingOutputCallRequest:
        @description =:
            | Server-streaming request.
        @source_path = "tests/test/test.proto"
        payload <: Payload:
            @description =:
                | Optional input payload sent along with the request.
            @json_tag = "payload"
            @rpcId = "3"
        response_parameters <: sequence of ResponseParameters
        response_status <: EchoStatus:
            @description =:
                | Whether server should return a given status
            @json_tag = "responseStatus"
            @rpcId = "7"
        response_type <: PayloadType:
            @description =:
                | Desired payload type in the response from the server.
                | If response_type is RANDOM, the payload from each response in the stream
                | might be of different types. This is to simulate a mixed type of payload
                | stream.
            @json_tag = "responseType"
            @rpcId = "1"
    !type StreamingOutputCallResponse:
        @description =:
            | Server-streaming response, as configured by the request and parameters.
        @source_path = "tests/test/test.proto"
        payload <: Payload:
            @description =:
                | Payload to increase response size.
            @json_tag = "payload"
            @rpcId = "1"

