
Foo:
    @description = ""
    @package = "grpc_testing"
    Foobar(input <: .StreamingOutputCallRequest):
        ...
        @description = ""

TestService:
    @description =:
        |// A simple service to test the various types of RPCs and experiment with
        |// performance with various types of payload.
        |// One empty request followed by one empty response.
        |//    rpc EmptyCall(Empty) returns (Empty);
    @package = "grpc_testing"
    FullDuplexCall(input <: .StreamingOutputCallRequest):
        ...
        @description =:
            |// A sequence of requests with each request served by the server immediately.
            |// As one request could lead to multiple responses, this interface
            |// demonstrates the idea of full duplexing.
    HalfDuplexCall(input <: .StreamingOutputCallRequest):
        ...
        @description =:
            |// A sequence of requests followed by a sequence of responses.
            |// The server buffers all the client requests and then serves them in order. A
            |// stream of responses are returned to the client when the server starts with
            |// first request.
    StreamingInputCall(input <: .StreamingInputCallRequest):
        ...
        @description =:
            |// A sequence of requests followed by one response (streamed upload).
            |// The server returns the aggregated size of client payload as the result.
    StreamingOutputCall(input <: .StreamingOutputCallRequest):
        ...
        @description =:
            |// One request followed by a sequence of responses (streamed download).
            |// The server returns the payload with client desired type and sizes.

grpc_testing:
    @package = "grpc_testing"
    !type EchoStatus:
        @description =:
            |// A protobuf representation for grpc status. This is used by test
            |// clients to specify a status that the server should attempt to return.
        Code <: int
        Message <: string
    !type Payload:
        @description =:
            |// A block of data, to simply increase gRPC message size.
        Body <: bytes
        Type <: .PayloadType
    !type ResponseParameters:
        @description =:
            |// Configuration for a particular response.
        IntervalUs <: int
        Size <: int
    !type SimpleRequest:
        @description =:
            |// Unary request.
        FillGrpclbRouteType <: bool
        FillOauthScope <: bool
        FillServerId <: bool
        FillUsername <: bool
        Payload <: .Payload
        ResponseSize <: int
        ResponseStatus <: .EchoStatus
        ResponseType <: .PayloadType
    !type SimpleResponse:
        @description =:
            |// Unary response, as configured by the request.
        GrpclbRouteType <: .GrpclbRouteType
        OauthScope <: string
        Payload <: .Payload
        ServerId <: string
        Username <: string
    !type StreamingInputCallRequest:
        @description =:
            |// Client-streaming request.
        Payload <: .Payload
    !type StreamingInputCallResponse:
        @description =:
            |// Client-streaming response.
        AggregatedPayloadSize <: int
    !type StreamingOutputCallRequest:
        @description =:
            |// Server-streaming request.
        Payload <: .Payload
        ResponseParameters <: sequence of .ResponseParameters
        ResponseStatus <: .EchoStatus
        ResponseType <: .PayloadType
    !type StreamingOutputCallResponse:
        @description =:
            |// Server-streaming response, as configured by the request and parameters.
        Payload <: .Payload

testing:
    !enum GrpclbRouteType:
        GRPCLB_ROUTE_TYPE_BACKEND: 2
        GRPCLB_ROUTE_TYPE_FALLBACK: 1
        GRPCLB_ROUTE_TYPE_UNKNOWN: 0
    !enum PayloadType:
        COMPRESSABLE: 0
        RANDOM: 2
        UNCOMPRESSABLE: 1

